using System;

class Program
{
    static void Main()
    {
        // Número de instâncias de entrada
        int T = int.Parse(Console.ReadLine());

        // Processa cada instância
        for (int t = 0; t < T; t++)
        {
            // Lê os valores de N e M
            string[] firstLine = Console.ReadLine().Split();
            int N = int.Parse(firstLine[0]);
            int M = int.Parse(firstLine[1]);

            // Lê os blocos disponíveis
            string[] blockSizes = Console.ReadLine().Split();
            int[] blocks = new int[N];
            for (int i = 0; i < N; i++)
            {
                blocks[i] = int.Parse(blockSizes[i]);
            }

            // Chama a função para calcular o mínimo de blocos
            int result = MinBlocks(N, M, blocks);

            // Imprime o resultado
            Console.WriteLine(result);
        }
    }

    // Função que calcula o número mínimo de blocos necessários para alcançar M
    static int MinBlocks(int N, int M, int[] blocks)
    {
        // Inicializa o vetor dp com valores altos (infinito)
        int[] dp = new int[M + 1];
        for (int i = 1; i <= M; i++)
        {
            dp[i] = int.MaxValue;
        }
        dp[0] = 0; // Para 0 comprimento, não precisamos de blocos

        // Preenche o vetor dp com o número mínimo de blocos necessários
        for (int i = 1; i <= M; i++)
        {
            foreach (int block in blocks)
            {
                if (i >= block && dp[i - block] != int.MaxValue)
                {
                    dp[i] = Math.Min(dp[i], dp[i - block] + 1);
                }
            }
        }

        // Retorna o número mínimo de blocos para atingir o comprimento M
        return dp[M];
    }
}
